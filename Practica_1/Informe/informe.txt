\begin{abstract}
    In this practice, fundamental concepts in the field of communications were explored using GNU Radio, developing blocks that simulate an accumulator and a differentiator applied to time-based signals or repetitive vectors. A block for statistical analysis was also included, evaluating both interference-free signals and signals with Gaussian distortion that were filtered to mitigate the effects of noise, demonstrating the effectiveness of the filter application for signals affected by disturbances. 
\end{abstract}\\ 

\section{Procedimiento}

\begin{itemize}
    \setlength{\itemsep}{\baselineskip} 
    \setlength{\parskip}{0pt}   % Reduce espacio entre párrafos
    \item Inicialmente, se crea una rama para el desarrollo de la práctica desde el repositorio, denominada Práctica\_1, la cual debe ser compartida con los demás integrantes del grupo. A esta rama se le asigna un repositorio con el mismo nombre, y dentro de dicho repositorio se crean dos carpetas: GNU Radio e Informe. Cada integrante del grupo establece su propia rama individual dentro de la rama Practica\_1, nombrada como P1\_Nombre1, P1\_Nombre2, y P1\_Nombre3. Se accede a estas ramas con el comando "git checkout P1\_Nombre#".
    \item En GNU Radio, se deben crear dos bloques: un acumulador y un diferenciador, utilizando el bloque 'python block'. Para editar el código Python, se hace doble clic en el bloque. El código para el acumulador y el diferenciador se implementa dentro de este bloque, con base al libro guía en la sección 1.2.0.1 \cite{Ortega2019}, posteriormente se implementan los bloques, tal como se observa en la Fig.\ref{fig:punto1_a}.1
    
 
 {\centering
    \includegraphics[scale=0.3]{figs/Diagrama_acu_diff.png}\\
    Fig.2.1 Implementación de los bloques acumulador y diferenciador tanto para una señal continua y vectores.
    \label{fig:punto1_a}
    } 
    \item A continuación, se debe crear un tercer bloque para mostrar las estadísticas de una señal. Este bloque, al igual que los anteriores, se implementa utilizando el bloque 'python block' en GNU Radio, donde se  realiza con base al libro guía sección 1.2.0.1 \cite{Ortega2019}. A partir de esta implementación se debe realizar una aplicación, en este caso disminuir la afectación del ruido Gaussiano en la estadística, para ello se divide la señal en 10 ventanas de tamaño 4096 muestras y se decide utilizar funciones propias de Python para intentar comparar con las sugeridas por el libro.

    {\centering
    \includegraphics[scale=0.23]{figs/Aplicacion.png}\\
    Fig.2.2 Implementación de la aplicación de reducción de ruido Gaussiano con las modificaciones realizadas.
    \label{fig:punto1_b}
    } 
  \item Para subir los cambios hechos en el dispositivo se usa el comando “git status” para verificar que hubo cambios de manera local.
   Si los cambios realizados se hicieron correctamente se debe utilizar el comando "git add .", este comando añade todos los archivos y cambios al área de preparación, por lo que deben ser confirmados con “git commit -m “mensaje”". Finalmente, con el comando "git push" los cambios son subidos a la nube en GitHub.
    
   \end{itemize}
   
Como consecuencia, se considera que el bloque de aplicación no hace un aporte significativo para mitigar los efectos del ruido, debido a que no se visualiza una diferencia notable entre los resultados, pero si se evidencia un contraste en el tiempo en el que demora en estabilizarse la respuesta de la señal. Por lo que para una próxima aplicación se sugiere la búsqueda de una estrategia diferente para reducir el efecto de las distorsiones en la señal y que a su vez logre estabilizarse su respuesta en el menor tiempo posible.\\\\
